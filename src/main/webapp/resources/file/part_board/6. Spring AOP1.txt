
@ Spring AOP
-> 관점 지향 프로그래밍 (Aspect Oriented Programming)의 약자로 일반적으로 사용하는
클래스(Service, DAO 등)에서 중복되는 공통 코드 부분(commit, rollback, log, 암호화 등)을
별도의 영역으로 분리해 내고, 코드가 실행되기 전이나 후의 시점에 해당 코드를 붙여 넣음으로써
소스 코드의 중복을 줄일 수 있는 기술


@ AOP 용어 및 기본 설정
-> AOP를 사용하려면 용어를 익혀야 함

## JoinPoint (조인포인트) ##
-> JoinPoint는 클라이언트가 호출하는 모든 비즈니스 메소드를 뜻 함
-> BoardServiceImpl 이나 MemberServiceImpl Class의 모든 메소드를 조인 포인트라고 생각 하면 됨
-> 조인 포인트를 '포인트컷 대상' 또는 '포인트컷 후보' 라고도 부름


## Pointcut (포인트컷) ##
-> 필터링된 조인 포인트를 의미
-> 예를 들면, 트랜잭션을 처리하는 공통 기능을 만들었다고 가정 할 때 등록, 수정, 삭제 기능의 비즈니스 메소드들은
당연히 트랜잭션에 대한 처리를 해야 하지만 검색 기능은 트랜잭션과는 무관함
-> 이때 수 많은 비즈니스 메소드 중에서 우리가 원하는 특정 메소드에서만 횡단 관심에 해당하는 트랜잭션
처리를 수행시키시 위해서는 포인트컷이 필요함
-> 포인트컷에서 가장 중요한 설정은 expression 속성
	(expression 속성에 따라 포인트컷 되는 메소드가 달라짐)


## Advice (어드바이스) ##
-> Advice는 횡단 관심에 해당하는 공통 기능의 코드를 의미
-> 독립된 클래스의 메소드로 작성 됨
-> 어드바이스로 구현된 메소드가 언제 동작할지 스프링 설정 파일을 통해서 지정할 수 있음
-> 예를 들면 트랜잭션 처리 코드는 비즈니스 로직이 처리되기 전에 넣어두면 안됨 (비즈니스 로직 처리 후 넣어야 함)
-> 스프링에서는 어드바이스의 동작 시점을 'before','after','after-returning','after-throwing','around' 로 
	다섯가지로 지정할 수 있음


## Aspect (애스팩트) 또는 Advisor (어드바이저) ##
-> 애스팩트는 포인트 컷과 어드바이스의 결합  
-> 어떤 포인트 컷 메소드에 대해서, 어떤 어드바이스 메소드를 실행할지를 결정
-> 이 애스팩트 설정에 따라 AOP의 동작 방식이 결정되므로 AOP 용어 중 가장 중요한 개념
-> 어드바이저는 애스팩트와 같지만 트랜잭션 설정 같은 몇몇의 특수한 경우에는 애스팩트가 아닌 
	어드바이저를 사용


## Weaving (위빙) ##
-> Advice를 핵심 로직 코드에 적용하는것을 Weaving (위빙) 이라고 함
-> 표현하자면, 제작된 LogAdvice를 AOP 설정하여 MemberServiceImpl이 가지고 있는 메소드(Pointcut)에
	weaving 처리 하자!

## Target (타겟) ##
-> 핵심 로직이 구현되어 있는 Class를 Target 이라고 함

## Proxy (프록시) ##
-> Target Class에 Advice를 Weaving 처리한 최종 객체를 Proxy 라고 부름




@ 어드바이스 동작 시점
-> 어드바이스는 다섯가지의 동작 시점을 제공함
-> Before, After Retruning, After Throwing, After, Around

## Before ##
-> JoinPoint로 설정된 메소드가 실행 전 동작을 수행

## After Retruning ##
-> JoinPoint로 설정된 메소드가 성공적으로 실행 된 후 동작을 수행

## After Throwing ##
-> JoinPoint로 설정된 메소드가 실행 중 예외가 발생하면 동작을 수행
-> try ~ catch 로 비유하면 catch 블록과 유사함

## After ##
-> JoinPoint로 설정된 메소드가 실행된 후 무조건 동작을 수행
-> try ~ catch~finllay로 비유하면 finally 블록와 유사함

## Around ##
-> JoinPoint로 설정된 메소드 호출 자체를 가로채 비즈니스 메소드 실행 전후에 처리할 로직을 삽입할 수 있음


@ JoinPoint와 바인드 변수
-> 횡단 관심에 해당하는 어드바이스 메소드를 의미있게 구현하려면 클라이언트가 호출한 비즈니스 메소드의
대한 정보가 필요함
-> 예를 들면, After Throwing 기능의 어드바이스 메소드를 구현한다고 할때, 예외가 발생한 비즈니스
메소드 이름이 무엇인지, 그 메소드가 속한 클래스와 패키지 정보는 무엇인지 알아야 정확한
예외처리 로직을 구현할 수 있음
-> 스프링에서는 이런 다양한 정보를 이용할 수 있도록 JoinPoint 인터페이스를 제공함

※ Before, After Returning, After Throwing, After 어드바이스는 JoinPoint 객체를 사용
※ Around 어드바이스는 ProceedingJoinPoint 객체를 사용
	- ProceedingJoinPoint는 Around에서만 사용되는 proceed() 메소드를 가지고 있는 객체 




@ 어노테이션 기반 AOP
-> AOP 설정을 XML 방식 말고도 어노테이션 방식으로도 설정할 수 있음
-> AOP를 어노테이션으로 설정하려면 가장 먼저 스프링 설정 파일에 <aop:aspectj-autoproxy> 엘리먼트를
선언해야 사용할 수 있음
-> <aop:aspectj-autoproxy> 엘리먼트를 설정 후 어드바이스 클래스에 선언된 어노테이션들을 스프링 컨테이너가
처리하게 하려면, 반드시 어드바이스 객체가 생성 되어 있어야 함
-> 따라서 어드바이스 클래스는 반드시 스프링 설정파일에 <bean>을 등록하거나
@Service 어노테이션을 사용하여 컴포넌트가 검색 될 수 있도록 해야 함

## 어노테이션 설정 ##
ex)
@Service  -> XML로 표기하면 <bean id="log" class="kr.or.iei.common.Log4jAdvice"></bean>
public class Log4jAdvice{
}

## 포인트컷 설정 ##
-> 기존 XML에서 포인트컷을 선언할 때 <aop:pointcut>을 사용 했었음
-> 여러 포인트컷을 식별하기 위한 용도로 ID를 지정하였음
	- ex) <aop:pointcut id="allPointcut" expression="..." />
-> 어노테이션으로 포인트컷을 선언할 때에는 @Pointcut 어노테이션을 사용하고, 하나의 어드바이스 클래스안에
여러개의 포인트컷을 선언할 수 있음
-> 이때 여러개의 포인트컷을 식별하기 위한 식별자로 참조 메소드를 이용함

ex)
public class Log4jAdvice{
	@Pointcut("execution(* kr.or.iei.member.model.service.*ServiceImpl.*(..))")
	public void allPointcut(){}

	@Pointcut("execution(int kr.or.iei.member.model.service.*ServiceImpl.*(..))")
	public void returnIntPointcut(){}

}
-> 참조 메소드는 메소드 몸체가 비어있는 메소드임 (즉, 동작 로직은 없는 이름만 빌려주는 메소드)
-> 따라서 어떤 기능 처리를 목적으로 하지 않고, 단순히 포인트컷을 식별하는 이름으로만 사용 됨
-> 그러므로 포인트컷 어노테이션을 명시한 메소드에 로직이 없고, 로직은 사용하는 메소드에 정의하는 것

ex)
@Service
public class Log4jAdvice{
	@Pointcut("execution(* kr.or.iei.member.model.service.*ServiceImpl.*(..))")
	public void allPointcut(){}

	@Before("allPointcut()")
	public void printLog(){
		System.out.println("[공통로그-Log4jAdvice] 비즈니스 로직 수행 전 호출");
	}

}


## Advice 동작 순서 어노테이션 ##
-> 기존 XML에서 사용했던 원리와 같음

## @Before ##
-> JoinPoint로 설정된 메소드가 실행 전 동작을 수행

## @After Retruning ##
-> JoinPoint로 설정된 메소드가 성공적으로 실행 된 후 동작을 수행

## @After Throwing ##
-> JoinPoint로 설정된 메소드가 실행 중 예외가 발생하면 동작을 수행
-> try ~ catch 로 비유하면 catch 블록과 유사함

## @After ##
-> JoinPoint로 설정된 메소드가 실행된 후 무조건 동작을 수행
-> try ~ catch~finllay로 비유하면 finally 블록와 유사함

## @Around ##
-> JoinPoint로 설정된 메소드 호출 자체를 가로채 비즈니스 메소드 실행 전후에 처리할 로직을 삽입할 수 있음


@ 애스팩트 설정
-> AOP에서 중요한 설정인 애스팩트 설정은 @Aspect 어노테이션을 이용하여 설정

ex) 
@Service
@Aspect		//이곳에 Aspect를 붙여야 함
public class Log4jAdvice{

}