
지난 시간...

Object! 객체 라는 것을 개발자가 new 라는 것을 통해서 직접적으로 생성하게 될 경우 무분별한 객체 생성으로 메모리 낭비가 심해질 수 있음

ex) Controller -> Service
	new MemberService()

Spring에서는 개발자가 직접 new 라는 키워드로 객체들을 만들지 않고, Spring Container가 객체들을 만들고, 관리할 수 있도록 하는 구조로 바꿔보자 -> IoC
	그동안 객체 생성을 개발자가 했다면?
	-> 이제는 객체 생성을 Container에게 맡기자
	-> 즉, 이러한 상황을 제어의 역행 (IoC - Inversion of Control)
	-> IoC를 하기 위해서는 DI라는 기술이 필요하다 -> DI (의존성 주입)

Controller	/ Service		/ DAO
-> 각각의 역할로 나누어 놓은 상태를 모듈화 했다라고 생각 할 수 있음

Controller 코드 안에서
MemberService mService = new MemberService();

＃ 인터페이스는 메소드를 정의해놓는 파일
	-> 단, 메소드는 몸체가 없는 메소드 (추상메소드)
# 인터페이스를 Implements 하게 되는 class는?
	-> 인터페이스 가지고 있는 메소드를 무조건 재정의해 함
	※ 메소드 재정의 : 메소드 오버라이드 (Method Override)

public interface TV {
	public void powerOn();
	public void powerOff();
	public void volumeUp();
	public void volumeDown();
}

public class LgTV implements TV {
	@Override
	public void powerOn() {
	
	}
}


@ Setter 메소드를 통한 의존성 주입
-> Setter 메소드를 통해 의존관계가 있는 Bean을 주입하려면 <property> 태그를 이용함

※ Bean 이란?
	-> 쉽게 생각하면 자바 객체를 뜻 함
	-> 스프링 컨테이너에 의해 만들어진 자바 객체

## XML 선언 방법 ##
<bean id="객체이름" class="클래스 풀네임">
	<property name="멤버변수" value="○○○"/>
	<property name="멤버변수" ref="○○○"/>
</bean>

- name 속성은 Class에서 선언한 멤버필드(멤버변수)의 이름을 사용
- value 속성은 단순 값 또는 Bean이 아닌 객체를 주입할 때 사용
- ref 속성을 사용하면 Bean 이름을 이용해 주입할 Bean을 찾음


@ 생성자를 통한 의존성 주입
-> Constructor를 통해 의존관계가 있는 Bean을 주입하려면 <contsructor-arg> 태그를 사용

## XML 선언 방법 ##
<bean id="객체이름" class="클래스 풀네임">
	<constructor-arg index="0" value="○○○"/>
	<constructor=arg name="○○○" ref="○○○"/>
</bean>

- Constructor 주입방식은 생성자의 파라미터를 이용하기 때문에 한번에 여러개의 객체를 주입할 수 있음
-> 필드 선언 순서에 따라 index 속성을 통해서도 접근이 가능 함


@ 스프링 XML 설정

## <beans> ##
-> 스프링 컨테이너는 <bean> 저장소에 해당하는 xml 설정 파일을 참조하여
<bean>들의 생명주기를 관리하고 있음

## <import> 엘리먼트 ##
-> 스프링은 설정파일(XML) 하나에 우리가 만든 모든 클래스를 <bean>으로 등록하고 관리할 수 있지만
너무 많은 코드가 하나의 XML 파일에 등록되면 코드가 길어지고 관리하기가 어려워짐
-> 이때, XML 파일을 여러개로 나누어 설정하고 import를 통해서 불러올 수 있음

## scope 속성 ##
-> 프로그램을 개발하다보면 개발자도 모르는 사이에 수 많은 객체가 생성 됨
-> 이 중에서 하나만 생성되어도 상관없는 객체들이 있음
-> scope 속성을 이용하면 객체를 singleton 형태로 만든 것인지 아니면 계속적으로 새롭게 생성할 것인지 설정할 수 있음
	- 기본적으로는 싱글톤 방식 / 매번 새롭게 만들 때에는 "prototype" 값을 주면 됨


※ 지금의 개념을 정리하면
1. 결합도를 낮추어야 좋은 코드가 된다.
2. 스프링에서는 DI 기법을 통해서 결합도를 낮춘다.
3. DI 기법에는 XML과 어노테이션이 있다.
4. 그중 XML로 만드는 방법을 해보자. (추후 어노테이션도 할 것임)
즉, 이 모든것은 개념을 익히기 위함임
스프링 MVC에서는 어노테이션, XML을 많이 쓰기 때문에 꼭 알아야하는 개념!


@ 컬렉션 (Collection) 객체 설정
-> 프로그램 개발을 하다보면 배열이나 List 같은 컬렉션 객체를 이용하여 데이터를 담을 수 있어야 함
-> 이때, 스프링에서는 XML에 컬렉션 관련된 엘리먼트를 지원함

## List 타입 매핑 ##
-> 배열 객체나 java.util.List 타입의 컬렉션 객체는 <list> 태그를 사용하여 설정함
-> 우선적으로 컬렉션을 멤버변수로 가지는 CollectionBean 클래스를 작성하여 사용 해야 함
	-> CollectionBean 는 표준 클래스가 아니라 List를 담을 수 있는 클래스를 뜻 함
	(즉, 클래스 이름은 변경하여도 됨 ex) CollectionListBean 등)

## Set 타입 매핑 ##
-> 중복 값을 허용하지 않는 집합 객체를 사용할 때에는 Set을 사용하게 됨

## Map 타입 매핑 ##
-> 특정 Key로 데이터를 등록하고 사용하는 Map 컬렉션 매핑도 지원



@ DI 어노테이션 방식
-> 대부분 프레임워크가 그렇듯이 스프링 프레임워크 역시 XML 설정이 매우 중요함
-> 하지만 반대적으로 XML 파일의 과도한 설정을 하게 되면 내용이 굉장히 많아지고 부담스러워 짐
-> 따라서 배부분의 프레임워크는 XML 방식이외에도 어노테이션 방식을 이용한 DI 설정을 지원하고 있음

## Context 네임 스페이스 추가 ##
-> 어노테이션 설정을 추가하려면 <beans>에 Context 관련 네임스페이스와 스키마 문서의 위치를 등록 해야 함

## 컴포넌트 스캔 (component-scan) 설정
-> 스프링 설정 파일에 애플리케이션에서 사용할 객체들을 <bean>에 등록을 하지 않고 자동적으로 생성하려면
<context:component-scan/> 이라는 엘리먼트를 정의해야 함
-> 이 설정을 추가하면 스프링 컨테이너는 클래스 패스에 있는 클래스들을 스캔하여
@Component가 설정된 클래스들을 자동으로 객체 생성을 함
-> <context:component-scan> 엘리먼트의 base-package 속성값을
"kr.or.iei.member" 형태로 지정하면 kr.or.iei.member 로 시작하는 모든 패키지를 스캔 대상으로 포함 시킴

kr.or.iei.member.controller		// 스캔 대상
kr.or.iei.member.model.vo		// 스캔 대상
kr.or.iei.member.test		// 스캔 대상
kr.or.iei.spring.controller		// 스캔 대상 아님
kr.or.iei.spting.member.controller	// 스캔 대상 아님

※ 위에 작업은 의존성 주입은 아님! 객체 생성 일뿐 (XML 방식으로 치면 <bean> 태그를 사용한 것 뿐)


@ 어노테이션 의존성 주입 설정
-> 스프링에서 의존성 주입을 지원하는 어노테이션으로는 @Autowired, @Inject, @Qualifier, @Resource가 있음

## @Autowired ##
-> 주로 변수위에 설정하여 해당 타입의 객체를 찾아서 자동으로 주입함 (의존성 주입)
 - import org.springframework.beans.factory.annotation.Autowired

## @Qualifier ##
-> 특정 객체의 이름을 이용하여 의존성을 주입할 때 사용
 - import org.springframework.beans.factory.annotation.Qualifier

## @Inject ##
-> @Autowired와 동일한 기능을 지원 (차이점은 Autowired는 스프링 정용, Inject는 자바 전용)
 - import jacax.inject.inject

## @Resource @@
-> @Autowired와 @Qualifier의 기능을 결합한 어노테이션
 - import.javax.annotation.resource

## @Autowired ##
-> 생성자나 메소드, 멤버변수 위에 모두 사용할 수 있음
-> 대부분은 멤버변수 위에 선언하여 사용함
-> 스프링 컨테이너는 멤버변수 위에 @Autowired를 확인하는 순간 해당 변수의 타입을 체크함
-> 그리고 그 타입의 객체가 메모리에 존재하는지를 확인한 후에 그 객체를 변수에 주입함 (의존성 주입)
-> 만약 @Autowired가 붙은 객체가 메모리에 없다면 컨테이너가 NoSuchBeanDefinitionException을 발생 시킴
(대상 객체가 메모리에 존재하지 않는다는 의미)

## @Qualifier ##
-> @Autowired를 쓰면 해당 타입의 객체를 넣어줌
-> 그러나 의존성 주입 대상이 되는 같은 타입의 객체가 2개일 때 문제가 발생함
-> 예를 들어 SonySpeaker와 AppleSpeaker가 Speaker 라는 객체를 둘다 상속 받고 메모리에 생성되었을 때
@Autowired를 통해서 부모 class(Speaker)를 의존성 주입하게 되면 둘 중 어떤 객체를 의존주의해야할지 모르기 때문에
에러가 발생함
-> 이때, @Qualifier 라는 어노테이션을 사용하면 해결 할 수 있음

## @Resource ##
-> @Autowired와 @Qualifier의 기능을 결합한 어노테이션
-> @Aurowired는 변수의 타입을 기준으로 객체를 검색하여 의존성 주입을 처리 함
-> @Resource를 이용하여 객체의 이름을 이용하여 의존성 주입을 처리함
-> @Resource는 name 속성을 사용할 수 있어서, 스프링 컨테이너가 해당 이름으로 생성된 객체를 검색하여 의존성 주입을 처리함


정리!!
@Component : 객체 생성
@Autowired : 객체타입을 바탕으로 객체를 찾아서 의존성 주입
@Qualifier : 객체이름을 바탕으로 해당 객체를 메모리에서 찾음
@Resource : @Autowired 와 @Qualifier 의 결합체